!include dict.uri
# Default password scheme
default_pass_scheme = MD5

# Username iteration prefix. Keys under this are assumed to contain usernames.
iterate_prefix = userdb/

# The example here shows how to do multiple dict lookups and merge the replies.
# The "passdb" and "userdb" keys are JSON objects containing key/value pairs,
# for example: { "uid": 1000, "gid": 1000, "home": "/home/user" }

key passdb {
  key = passdb/%u
  format = json
}
key userdb {
  key = userdb/%u
  format = json
}
#key quota {
#  key = userdb/%u/quota # or e.g. quota/%{userdb:quota_class}
  #format = value
  # The default_value is used if the key isn't found. If default_value
  # setting isn't specified at all (even as empty), the passdb/userdb
  # lookup fails with "user doesn't exist".
#  default_value = 100M
#}

# Space separated list of keys whose values contain key/value paired objects.
# All the key/value pairs inside the object are added as passdb fields.
# This can only be used for JSON formatted values.
passdb_objects = passdb

#passdb_fields {
#}

# Userdb key/value object list.
userdb_objects = userdb

#userdb_fields {
  # dict:<key> refers to key names
#  quota_rule = *:storage=%{dict:quota}

  # dict:<key>.<objkey> refers to the objkey inside (JSON) object
#  mail = sdbox:%{dict:userdb.home}/dbox
#}
